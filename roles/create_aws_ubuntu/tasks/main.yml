---
- debug: msg="{{ aws_access_key }} is an key"

- name: Dump all vars
  action: template src=dumpall.j2 dest=/tmp/ansible.all

- block:
  - name: Create a security group
    local_action: 
      module: ec2_group
      name: "{{ security_group }}"
      description: Security Group for webserver Servers
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: basic_firewall
  
  - debug: msg="{{ public_subnet_id }}"

  - ec2:
      group: "{{ security_group }}"
      instance_type: "{{ instance_type}}"
      image: "{{ image }}"
      wait: true 
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      assign_public_ip: yes
      exact_count: 1
      vpc_subnet_id: "{{ public_subnet_id }}"
      count_tag: 
        Name: "{{ item.name }}"
      instance_tags:
        group: customer_hosts
        Name: "{{ item.name }}"
    loop: "{{ servers }}"

  - ec2_instance_facts:
      filters:
        instance-state-name: running
        "tag:group": customer_hosts
    register: instance_details

  - debug: msg="{{ instance_details }}"

  - name: Add the newly created EC2 instance(s) to the local host group
    local_action: lineinfile 
                  dest="./hosts" 
                  regexp={{ item.public_ip_address }} 
                  insertafter="[webservers]" 
                  line={{ item.public_ip_address }}
    loop: "{{ instance_details.instances }}"


  - name: Wait for SSH to come up
    local_action: wait_for 
                  host={{ item.public_ip_address }} 
                  port=22 
                  state=started
    loop: "{{ instance_details.instances }}"

  environment:
    AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
    AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
    AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
