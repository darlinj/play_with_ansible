---
- block:

  - debug:
      msg: "{{ interfaces.management.ip }}"

  - ec2_eni:
      private_ip_address: "{{ interfaces.management.ip }}"
      description: "{{ interfaces.management.name }}"
      subnet_id: "{{ public_subnet_id }}"
      security_groups: "{{ security_group }}"
      region: "{{ region }}"
      state: present
    register: managment_interface

  - debug:
      msg: "{{ managment_interface }}"

  - ec2:
      instance_type: "{{ instance_type}}"
      image: "{{ image }}"
      wait: true 
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      network_interface: "{{ managment_interface.interface.id }}"
      exact_count: 1
      count_tag: 
        Name: Bernard
      instance_tags:
        Name: Bernard
#    loop: "{{ servers }}"
#
#  - ec2_instance_facts:
#      filters:
#        instance-state-name: running
#        "tag:group": customer_hosts
#    register: instance_details
#
#  - debug: msg="{{ instance_details }}"
#
#  - name: Delete all IP's from the customer_hosts section
#    local_action: replace
#      path="./hosts" 
#      regexp='\[customer_hosts\]\n[0-9\.\n]*'
#      replace='[customer_hosts]\n' 
#
#  - name: Add the EC2 instance(s) to the local host group
#    local_action: lineinfile 
#                  dest="./hosts" 
#                  insertafter="[customer_hosts]" 
#                  line={{ item.public_ip_address }}
#    loop: "{{ instance_details.instances }}"
#
#
#  - name: Wait for SSH to come up
#    local_action: wait_for 
#                  host={{ item.public_ip_address }} 
#                  port=22 
#                  state=started
#    loop: "{{ instance_details.instances }}"

  environment:
    AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
    AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
    AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
